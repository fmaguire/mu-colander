//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>

/** Function Headers */
void processVideo(char* videoFilename);

/**
 * @function main
 */
int main(int argc, char* argv[])
{

    //check for the input parameter correctness
    if(argc != 2 || strcmp(argv[1], "-h") == 0) {
        std::cerr << "Usage: " << argv[0] << " video.avi" << std::endl;
        std::exit(1);
    }

    //create GUI windows
    cv::namedWindow("Frame");
    cv::namedWindow("FG Mask MOG 2");
    cv::namedWindow("fg_img");
    cv::namedWindow("bg_img");

    processVideo(argv[1]);
    
    //destroy GUI windows
    cv::destroyAllWindows();
    return 0;
}

/**
 * @function processVideo
 */
void processVideo(char* videoFilename) {

    cv::Mat frame; //current frame
    cv::Mat fg_mask; //fg mask fg mask generated by MOG2 method
    cv::Ptr<cv::BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
    int keyboard; //input from keyboard
    

    //create Background Subtractor
    pMOG2 = cv::createBackgroundSubtractorMOG2(); 


    //create the capture object
    cv::VideoCapture capture(videoFilename);
    if(!capture.isOpened()){
        //error in opening the video input
        std::cerr << "Unable to open video file: " << videoFilename << std::endl;
        std::exit(1);
    }

    cv::Mat fg_img; 
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            std::cerr << "Unable to read next frame." << std::endl;
            std::cerr << "Exiting." << std::endl;
            std::exit(1);
        }



        //update the background model
        pMOG2->apply(frame, fg_mask);

        cv::GaussianBlur(fg_mask, fg_mask, cv::Size(15, 15), 3, 3);
        //cv::threshold(fg_mask, fg_mask, 5, 200, 0);
        

        
        fg_img = cv::Scalar::all(0);
        frame.copyTo(fg_img, fg_mask);

        cv::Mat bg_img;
        pMOG2->getBackgroundImage(bg_img);



        //get the frame number and write it on the current frame
        std::stringstream ss;
        cv::rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        ss << capture.get(cv::CAP_PROP_POS_FRAMES);
        std::string frameNumberString = ss.str();
        cv::putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                cv::FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));

        //show the current frame and the fg masks
        cv::imshow("Frame", frame);
        cv::imshow("fg_img", fg_img);
        cv::imshow("bg_img", bg_img);
        cv::imshow("FG Mask MOG 2", fg_mask);
        ////get the input from the keyboard
        keyboard = cv::waitKey( 30 );
    }
    //delete capture object
    capture.release();
}
