//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>

// Global variables
cv::Mat frame; //current frame
cv::Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
cv::Ptr<cv::BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard

/** Function Headers */
void processVideo(char* videoFilename);


/**
 * @function main
 */
int main(int argc, char* argv[])
{

    //check for the input parameter correctness
    if(argc != 2 || strcmp(argv[1], "-h") == 0) {
        std::cerr << "Usage: " << argv[0] << " video.avi" << std::endl;
        std::exit(1);
    }

    //create GUI windows
    cv::namedWindow("Frame");
    cv::namedWindow("FG Mask MOG 2");

    processVideo(argv[1]);
    
    //destroy GUI windows
    cv::destroyAllWindows();
    return 0;
}

/**
 * @function processVideo
 */
void processVideo(char* videoFilename) {
    //create Background Subtractor objects
    pMOG2 = cv::createBackgroundSubtractorMOG2(); //MOG2 approach


    //create the capture object
    cv::VideoCapture capture(videoFilename);
    if(!capture.isOpened()){
        //error in opening the video input
        std::cerr << "Unable to open video file: " << videoFilename << std::endl;
        std::exit(1);
    }
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            std::cerr << "Unable to read next frame." << std::endl;
            std::cerr << "Exiting..." << std::endl;
            std::exit(1);
        }
        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);

        //show the current frame and the fg masks
        cv::imshow("Frame", frame);
        cv::imshow("FG Mask MOG 2", fgMaskMOG2);
        ////get the input from the keyboard
        keyboard = cv::waitKey( 30 );
    }
    //delete capture object
    capture.release();
}
